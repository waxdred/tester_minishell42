#!/bin/bash
RESET="\033[0m"
BLACK="\033[30m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"
exe="./minishell"
e=0
g=0
rm -rf _logError
##############################################################################################################
##						minishell 						    ##
##############################################################################################################
declare -a c_echo=("echo test" 
		   'echo test         test'
		   'echo "test'
		   'echo $TEST'
		   'echo $?'
		   'echo "$TEST"'
		   "echo '$TEST'"
		   'echo "$TEST$TEST$TEST"'
		   'echo "$TEST$TEST=lol$TEST"'
		   'echo "   $TEST lol $TEST"'
		   'echo $TEST$TEST$TEST'
		   'echo $TEST$TEST=lol$TEST""lol'
		   'echo    $TEST lol $TEST'
		   'echo test "" test "" test'
		   'echo "$TEST"'
		   'echo "$=TEST"'
		   'echo "$"'
		   'echo "$?TEST"'
		   'echo $TEST $TEST'
		   'echo "$TEST"'
		   'echo "$T1TEST"'
		   'echo hudifg d | | hugdfihd'
 		   'echo'
 		   'echo simple'
 		   'echo '''
 		   'echo ""'
 		   'echo "\n \n \n"'
 		   'echo hi";" hihi'
	   	   )

declare -a c_cd=('cd .. | pwd'
		 'cd/Users | pwd'
		 'cD | pwd'
		 'mkdir test_dir | pwd'
		 'cd test_dirr | pwd'
		 'rm -rf ../test_dir | pwd'
		 'cd . | pwd'
		 'cd ./test_dir | pwd'
		 'cd .. | pwd'
		 'cd no_file'
		 'rm -rf test_dir'
		 )

declare -a c_exit=("exit 42"
		   "exit 42 53 68"
		   "exit 259"
		   "exit 9223372036854775807"
		   "exIt -9223372036854775808"
		   "exit 9223372036854775808"
		   "exit -9223372036854775810"
		   "exit -4"
		   "exit wrong"
		   "exit wrong_command"
		   "gdagadgag"
		   "ls -Z"
		   "cd gdhahahad"
		   "ls -la | wtf"
		   )

declare -a c_env=("env | sort | grep -v SHLVL | grep -v _="
		  "export | sort | grep -v SHLVL | grep -v _= | grep -v OLDPWD"
		  'expORt ='
		  'export 1TEST='
		  'export TEST '
		  'export ""="" '
		  'export TES=T=""'
		  'export TE+S=T=""'
		  'export TEST=LOL '
		  'echo $TEST'
		  'export TEST=LOL' 
		  'echo $TEST$TEST$TEST=lol$TEST'
		  'export TEST=LOL' 
		  'export TEST+=LOL' 
		  'export TEST="ls       -l     - a" '
		  'echo $TEST'
		  'export LOL=lala ROR=rara | env | sort | grep LOL ROR'
 		  'unset LOL ROR | env | sort | grep LOL ROR'
 		  'export "HI= hi"| env | sort | grep HI'
 		  'export "HI =hi"| env | sort | grep HI'
 		  'export HI=h"i| env | sort | greg HI'
		   )

declare -a c_syntax=('" echo" lol'
 		     '"echo " lol'
 		     '" echo" | " pwd"'
 		     '"echo " | "pwd "'
 		     '/bin/lsa'
 		     './Makefile'
 		     '| test'
 		     'echo > <'
 		     'echo | |'
 		     'echo ||'
 		     '<'
 		     'rm -f ls; cat < ls > ls'
 		     "grep -z"
 		     "ls'| 'wc -l"
 		     "/ls"
)

declare -a c_unset=('unset PWD | ls'
		    'unset PWD | /bin/Ls'
		    'unset PWD | /bin/ls'
		    'unset PWD USERS HOME LOGNAME | env | grep USERS HOME LOGNAME'
		    'unset PWD | echo ok'
		    )

declare -a c_redi=('echo test > ls'
		   '/bin/ls'
		   'echo test > ls >> ls >> ls > echo test >> ls'
		   'cat ls'
		   '> lol echo test lol'
		   '>lol echo > test>lol>test>>lol>test mdr >lol test >test'
		   'CAT test'
		   '/Bin/Cat tzest'
		   'cat < ls'
		   'cat < ls > ls'
		   'rm -rf ls test lol mdr lol echo'
		   'head -c 2000000 /dev/zero > big_file'
		   'cat big_file | ls'
		   'cat big_file | echo lol'
	   	   )
declare -a c_pipe=('cat tests/lorem.txt | grep arcu | cat -e'
		   'echo test | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e| cat -e| cat -e| cat -e| cat -e| cat -e| cat -e| cat -e| cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e|cat -e'
		'cat /dev/random | head -c 100 | wc -c'
		'ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls'
		'ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls'
				)

declare -a c_error=(';; test'
		    '| test'
		    'echo > <'
		    'echo | |'
		    '<'
		    )

##############################################################################################################
##						minishell bonus						    ##
##############################################################################################################
declare -a c_and=('cd .. && ls && cat Makefile'
		 'cd .. && ls && error'
	         'cd .. && cat -e Makefile && ls && ls && ls && ls && ls && ls'
	 	)

declare -a c_ou=('ls || cat greg'
		'cd .. && cat -e Makefile || ls'
		'ls || ls || grz || lol'
		)

declare -a c_par=('((ls))'
		 '(ls)'
		 '(()ls)'
		 '(none)'
	 	)

declare -a c_wid=('cd .. && cat M*'
		 'cd .. && cat M*e'
		 'cd .. && touch testelele && cat *le && rm -rf testelele'
		 'cd .. && echo salut > _tesit && cat _**************************************************************it && cat *esit && rm -rf _tesit'
		 'cd .. && touch ....... && la .* && rm -rf .......'
		 'cd .. && ls ./* * .* '
		 'cd .. && ls ./*'
		 'cd .. && rm -rf .......'
	 	)

declare -a c_all_bonus=('cd .. && (lol) || (ls ./*) && ls .*'
		       'cd .. && (ls) && (cat -e Makefil | tr ab 12) || cat -e Makefile | tr ab 12 > _test && cat -e _test && rm _test'
		       'cd .. && (ls) && sgrvgrg || cat -e Makefile | tr ab 12 > _test && cat -e _test && rm _test'
		       'cd .. && ls  (test(test))'
		)
IFS=""

exec_run()
{
	printf "${CYAN}exec cmd--> ${@}${RESET}\n" | head -c 50
	echo ${@} | ${exe} > _log
	sed '1d' _log > _log2
	sed '$d' _log2 > _log
	rm _log2
	echo ${@} | bash > _log1
	sleep 0.1
	if [[ $(diff _log _log1) ]];
	then
		printf "${RED}Error!${RESET}\n"
		echo "cmd----->"${@} >> _logError
		cat _log >> _logError
		cat _log1 >> _logError
		let "e += 1"
	else
		printf "${GREEN}Ok!${RESET}\n"
		let "g += 1"
	fi
}
exec_run()
{
	printf "${CYAN}exec cmd--> ${@}${RESET}\n"
	echo ${@} | ${exe} > _log | head -c 30
	sed '1d' _log > _log2
	sed '$d' _log2 > _log
	rm _log2
	echo ${@} | bash > _log1
	sleep 0.1
	if [[ $(diff _log _log1) ]];
	then
		printf "${RED}Error!${RESET}\n"
		echo "cmd----->"${@} >> _logError
		echo "minishell================================" >> _logError
		cat _log >> _logError
		echo "bash=====================================" >> _logError
		cat _log1 >> _logError
		echo "=========================================" >> _logError
		let "e += 1"
	else
		printf "${GREEN}Ok!${RESET}\n"
		let "g += 1"
	fi
}

builtin_echo()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==	   echo	       ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_echo[@]}
	do
		exec_run ${i}
	done
}

builtin_cd()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==	   cd	       ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_cd[@]}
	do
		exec_run ${i}
	done
}

builtin_exit()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==	   exit	       ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_exit[@]}
	do
		exec_run ${i}
	done
}

builtin_env()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==     env\export     ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_env[@]}
	do
		exec_run ${i}
	done
}

builtin_redi()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==     redirection    ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_redi[@]}
	do
		exec_run ${i}
	done
}

builtin_pipe()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==     redirection    ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_pipe[@]}
	do
		exec_run ${i}
	done
}
builtin_error()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       Error        ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_error[@]}
	do
		exec_run ${i}
	done
}

builtin_unset()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       Unset        ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_unset[@]}
	do
		exec_run ${i}
	done
}
count()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       Result       ==\n"
	printf	"========================\n"
	printf "${RESET}\n"
	printf "${RED}error = ${e}\n"
	printf "${GREEN}bon = ${g}\n"
}

builtin_and()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       &&           ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_and[@]}
	do
		exec_run ${i}
	done
}

builtin_ou()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       ||           ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_ou[@]}
	do
		exec_run ${i}
	done
}

builtin_par()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==       ()          ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_par[@]}
	do
		exec_run ${i}
	done
}

builtin_wild()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==      wildcard      ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_wid[@]}
	do
		exec_run ${i}
	done
}

builtin_syntax()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==     syntax         ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_wid[@]}
	do
		exec_run ${i}
	done
}

builtin_all_bonus()
{
	printf "${CYAN}"
	printf	"========================\n"
	printf	"==     all bonus      ==\n"
	printf	"========================\n"
	printf "${RESET}"
	for i in ${c_all_bonus[@]}
	do
		exec_run ${i}
	done
}
if [ $# -eq 0 ]; then
	builtin_echo
	builtin_cd
	builtin_env
	builtin_unset
	builtin_exit
	builtin_redi
	builtin_pipe
	builtin_syntax
	builtin_error
	count
	if [ ${e} -gt 0 ]; then
		cat _logError
	fi
	rm -rf _log _log1
fi
if [ $# -gt 0 ]; then
	if [ $1 = "echo" ]; then
		builtin_echo
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "cd" ]; then
		builtin_cd
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "env" ]; then
		builtin_env
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "unset" ]; then
		builtin_unset
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "exit" ]; then
		builtin_exit
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "redi" ]; then
		builtin_redi
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "pipe" ]; then
		builtin_pip
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "wildcard" ]; then
		builtin_wild
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "syntax" ]; then
		builtin_syntax
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "error" ]; then
		builtin_error
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "bonus" ]; then
		builtin_and
		builtin_ou
		builtin_par
		builtin_wild
		builtin_all_bonus
		count
		if [ ${e} -gt 0 ]; then
			cat _logError
		fi
	elif [ $1 = "-c" ] && [ $# -eq 2 ]; then
		exec_run $2
	else
	 	printf "command:\n\techo\n\tcd\n\tcd\n\tenv\n\tunset\n\texit\n\tredi\n\tpipe\n\terror\n\tsyntax\n\twildcard\n\t-c \"cmd\"\n"
	fi
fi
rm _tesit big_file _log1 _log2 2>/dev/null 
